# -*- coding: utf-8 -*-
"""EDA(top.1 clusterting).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D9oDRWoHjlCe-3Rm5NMJKye8IZkZpZcb
"""

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

# !pip install squarify

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

plt.rc("font", family="NanumGothic")
plt.rc("axes", unicode_minus=False)

sns.set_theme(style="white", palette="tab10", context="notebook")

plt.rcParams["font.family"] = "NanumGothic"
plt.rcParams["axes.unicode_minus"] = False

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Deep learning/최종/Top1_clustering.csv")
df

df['Cluster'].unique()

df_comp = df[["연령","top1","Cluster"]]

df1 = df_comp[df_comp["Cluster"] == 0]

df_top_counts = df1['top1'].value_counts()
df_top_counts

df_age = df1['연령'].value_counts()
df_age

# cluster_0_data = df[df['Cluster'] == 0]

# age_top1_counts = cluster_0_data.groupby('연령')['top1'].value_counts().unstack(fill_value=0)

# for age, counts in age_top1_counts.iterrows():
#     plt.figure()
#     counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)
#     plt.title(f"Top1 Activity Distribution for Age Group {age} (Cluster 0)")
#     plt.ylabel('')
#     plt.show()

cluster_age_counts_table = df.groupby('Cluster')['연령'].value_counts().unstack(fill_value=0)
cluster_age_counts_table

cluster_0_data = df[df['Cluster'] == 0]
cluster_1_data = df[df['Cluster'] == 1]
cluster_2_data = df[df['Cluster'] == 2]
cluster_3_data = df[df['Cluster'] == 3]
cluster_4_data = df[df['Cluster'] == 4]
cluster_5_data = df[df['Cluster'] == 5]



age_top1_counts = cluster_0_data.groupby('연령')['top1'].value_counts().unstack(fill_value=0)
age_top1_counts_1 = cluster_1_data.groupby('연령')['top1'].value_counts().unstack(fill_value=0)
age_top1_counts_2 = cluster_2_data.groupby('연령')['top1'].value_counts().unstack(fill_value=0)
age_top1_counts_3 = cluster_3_data.groupby('연령')['top1'].value_counts().unstack(fill_value=0)
age_top1_counts_4 = cluster_4_data.groupby('연령')['top1'].value_counts().unstack(fill_value=0)

from IPython.display import display

display(age_top1_counts)
display(age_top1_counts_1)
display(age_top1_counts_2)
display(age_top1_counts_3)
display(age_top1_counts_4)

# import matplotlib.pyplot as plt

# # 연령별 클러스터의 명 수를 구하기
# age_top1_counts = df.groupby(['연령', 'Cluster']).size().unstack(fill_value=0)

# # 각 연령대에 대해 파이 차트 생성
# for age, counts in age_top1_counts.iterrows():
#     plt.figure()
#     counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)
#     plt.title(f"연령대 {age}의 클러스터 분포")
#     plt.ylabel('')  # Y축 레이블 제거
#     plt.show()

df['LifeStage'].unique()

df['성별'] = df['남녀구분코드'].map({1: '남성', 2: '여성'})

#총 인원
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Cluster', palette='Set2')
plt.title('Number of People in Each Cluster')
plt.xlabel('Cluster')
plt.ylabel('인원 수')
plt.show()

#미혼 기혼 노령
df_marry = df.groupby(['Cluster', 'LifeStage']).size().reset_index(name='Count')

df_marry = df_marry.sort_values(by=['Cluster', 'Count'], ascending=[True, False])

plt.figure(figsize=(12, 8))
sns.barplot(data=df_marry, x='Cluster', y='Count', hue='LifeStage', palette='Set1', alpha = 0.6)
plt.title('클러스터 별 LifeStage')
plt.xlabel('Cluster')
plt.ylabel('LifeStage')
plt.legend(title='LifeStage', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

#성별
plt.figure(figsize=(12, 8))
sns.countplot(data=df, x='Cluster', hue='성별', palette='pastel')
plt.title('Gender Distribution Across Clusters')
plt.xlabel('Cluster')
plt.ylabel('인원 수')
plt.legend(title='Gender', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

clusters = [0, 1, 2, 3, 4]

for cluster in clusters:
    df_cluster = df[df['Cluster'] == cluster]

    age_order = df_cluster['연령'].value_counts().index

    plt.figure(figsize=(8, 6))
    sns.countplot(data=df_cluster, x='연령', order=age_order, palette='Set3')
    plt.title(f'{cluster} 클러스터의 연령대 별 인원 수')
    plt.xlabel('연령대')
    plt.ylabel('인원')
    plt.show()

df_counts = df.groupby(['Cluster', '연령']).size().reset_index(name='Count')

df_counts = df_counts.sort_values(by=['Cluster', 'Count'], ascending=[True, False])

plt.figure(figsize=(12, 8))
sns.barplot(data=df_counts, x='Cluster', y='Count', hue='연령', palette='Set3')
plt.title('클러스터 별 연령대 분포')
plt.xlabel('Cluster')
plt.ylabel('인원 수')
plt.legend(title='연령대', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# df_cluster_0 = df[df['Cluster'] == 0]
# df_cluster_1 = df[df['Cluster'] == 1]
# df_cluster_2 = df[df['Cluster'] == 2]
# df_cluster_3 = df[df['Cluster'] == 3]
# df_cluster_4 = df[df['Cluster'] == 4]
# df_cluster_5 = df[df['Cluster'] == 5]

# top1_order_0 = df_cluster_0['top1'].value_counts().index
# top1_order_1 = df_cluster_1['top1'].value_counts().index
# top1_order_2 = df_cluster_2['top1'].value_counts().index
# top1_order_3 = df_cluster_3['top1'].value_counts().index
# top1_order_4 = df_cluster_4['top1'].value_counts().index
# top1_order_5 = df_cluster_5['top1'].value_counts().index

# plt.figure(figsize=(12, 8))
# sns.countplot(data=df_cluster_0, x='top1', palette='viridis')
# plt.title('Age Distribution in Cluster 0')
# plt.xlabel('Age Group')
# plt.ylabel('Count')
# plt.show()

# plt.figure(figsize=(12, 8))
# sns.countplot(data=df_cluster_1, x='top1', palette='viridis')
# plt.title('Age Distribution in Cluster 1')
# plt.xlabel('Age Group')
# plt.ylabel('Count')
# plt.show()

# plt.figure(figsize=(12, 8))
# sns.countplot(data=df_cluster_2, x='top1', palette='viridis')
# plt.title('Age Distribution in Cluster 2')
# plt.xlabel('Age Group')
# plt.ylabel('Count')
# plt.show()

# plt.figure(figsize=(12, 8))
# sns.countplot(data=df_cluster_3, x='top1', palette='viridis')
# plt.title('Age Distribution in Cluster 3')
# plt.xlabel('Age Group')
# plt.ylabel('Count')
# plt.show()

# plt.figure(figsize=(12, 8))
# sns.countplot(data=df_cluster_4, x='top1', palette='viridis')
# plt.title('Age Distribution in Cluster 4')
# plt.xlabel('Age Group')
# plt.ylabel('Count')
# plt.show()

# plt.figure(figsize=(12, 8))
# sns.countplot(data=df_cluster_5, x='top1', palette='viridis')
# plt.title('Age Distribution in Cluster 5')
# plt.xlabel('Age Group')
# plt.ylabel('Count')
# plt.show()

df_top1 = df.groupby(['Cluster', 'top1']).size().reset_index(name='Count')

# Sort 'df_counts' by 'Cluster' and then by 'Count' within each 'Cluster' in descending order
df_top1 = df_top1.sort_values(by=['Cluster', 'Count'], ascending=[True, False])

# Plotting
plt.figure(figsize=(12, 8))
sns.barplot(data=df_top1, x='Cluster', y='Count', hue='top1', palette='tab20b')
plt.title('클러스터 별 top1 분포')
plt.xlabel('Cluster')
plt.ylabel('인원 수')
plt.legend(title='연령대', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

plt.figure(figsize=(12, 8))
sns.countplot(data=df, x='LifeStage', hue='연령', palette='tab10')
plt.title('Age Group Distribution by LifeStage')
plt.xlabel('LifeStage')
plt.ylabel('Count')
plt.legend(title='Age Group', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

df_male = df[df['남녀구분코드']==1]

df_shopping_m = df_male.groupby(['top1', '연령']).size().reset_index(name='Count')

df_shopping_m = df_shopping_m.sort_values(by=['연령', 'Count'], ascending=[True, False])

plt.figure(figsize=(12, 8))
sns.barplot(data=df_shopping_m, x='top1', y='Count', hue='연령', palette='Set3')
plt.title('top1 별 연령대 분포(남성)')
plt.xlabel('top1 카테고리')
plt.ylabel('인원 수')
plt.legend(title='연령대', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

df_female = df[df['남녀구분코드']==2]

df_shopping_f = df_female.groupby(['top1', '연령']).size().reset_index(name='Count')

df_shopping_f = df_shopping_f.sort_values(by=['연령', 'Count'], ascending=[True, False])

plt.figure(figsize=(12, 8))
sns.barplot(data=df_shopping_f, x='top1', y='Count', hue='연령', palette='Set3')
plt.title('top1 별 연령대 분포(여성)')
plt.xlabel('top1 카테고리')
plt.ylabel('인원 수')
plt.legend(title='연령대', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

import squarify
cluster_0 = df_male[df_male['Cluster'] == 0]
top1_counts_0 = cluster_0['top1'].value_counts()

plt.figure(figsize=(10, 6))
colors = plt.cm.Pastel1(range(len(top1_counts_0)))
squarify.plot(sizes=top1_counts_0.values, label=top1_counts_0.index, color=colors, alpha=0.8)
plt.title('클러스터 0의 Top1 활동 분포 (트리맵)')
plt.axis('off')
plt.show()

# clusters = [0, 1, 2, 3, 4]

# for cluster in clusters:
#     df_cluster = df_male[df_male['Cluster'] == cluster]

#     age_order = df_cluster['top1'].value_counts().index

#     plt.figure(figsize=(10, 6))
#     colors = plt.cm.Pastel1(range(len(top1_counts_0)))
#     squarify.plot(sizes=top1_counts_0.values, label=top1_counts_0.index, color=colors, alpha=0.8)
#     plt.title(f'클러스터 {cluster}의 Top1 활동 분포 (트리맵)')
#     plt.axis('off')
#     plt.show()

# 클러스터, 연령대, top1 활동의 빈도 계산
bubble_data = df.groupby(['Cluster', '연령', 'top1']).size().reset_index(name='Count')

plt.figure(figsize=(12, 8))
sns.scatterplot(data=bubble_data, x='Cluster', y='top1', size='Count', hue='연령', sizes=(20, 200), alpha=0.7)
plt.title('Cluster와 Top1 활동의 연령대별 버블 차트')
plt.xlabel('Cluster')
plt.ylabel('Top1 Activity')
plt.legend(title='Age Group', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# from math import pi

# # 클러스터 0의 top1 활동 비율 계산
# cluster_0 = df[df['Cluster'] == 0]
# top1_counts_0 = cluster_0['top1'].value_counts(normalize=True)

# # 레이더 차트를 그리기 위한 데이터 준비
# categories = list(top1_counts_0.index)
# values = top1_counts_0.values.tolist()
# values += values[:1]  # 첫 번째 값으로 돌아가기 위해 마지막 값 추가

# # 레이더 차트 그리기
# N = len(categories)
# angles = [n / float(N) * 2 * pi for n in range(N)]
# angles += angles[:1]

# plt.figure(figsize=(8, 8))
# ax = plt.subplot(111, polar=True)
# plt.xticks(angles[:-1], categories, color='grey', size=12)
# ax.plot(angles, values)
# ax.fill(angles, values, alpha=0.3)
# plt.title('클러스터 0의 Top1 활동 분포 (레이더 차트)')
# plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='top1', hue='성별', palette='coolwarm')
plt.title('성별에 따른 Top1 활동 분포')
plt.xlabel('Top1 Activity')
plt.ylabel('Count')
plt.legend(title='Gender', labels=['Male', 'Female'], bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='연령', bins=5, kde=True, color='skyblue')
plt.title('연령대 분포 히스토그램')
plt.xlabel('Age Group')
plt.ylabel('Frequency')
plt.show()

life_gender_top1 = df.groupby(['성별', 'LifeStage', 'top1']).size().unstack().fillna(0)
life_gender_top1 = life_gender_top1.div(life_gender_top1.sum(axis=1), axis=0)  # 100% 누적

life_gender_top1.plot(kind='bar', stacked=True, figsize=(12, 8), colormap='viridis')
plt.title('성별 및 LifeStage에 따른 Top1 활동 비율 (100% 누적)')
plt.xlabel('성별 및 LifeStage')
plt.ylabel('비율')
plt.legend(title='Top1 Activity', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

